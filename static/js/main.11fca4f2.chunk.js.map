{"version":3,"sources":["logo.svg","utils/LocalStorage.js","Components/About.jsx","Components/Cart.jsx","Components/Home.jsx","Components/Login.jsx","Redux/AuthReducer/actions.js","Redux/AuthReducer/actionsType.js","Components/Products.jsx","Redux/AppReducer/actions.js","Redux/AppReducer/actionsType.js","Components/ProductsDetails.jsx","Components/AllRoutes.jsx","App.js","serviceWorker.js","Redux/AppReducer/reducer.js","Redux/AuthReducer/reducer.js","Redux/AppReducer/store.js","index.js"],"names":["module","exports","loadData","key","temp","localStorage","getItem","JSON","parse","e","saveData","data","setItem","stringify","About","Cart","Home","token","useSelector","state","AuthReducer","tokn","Login","useState","email","password","form","setForm","navigate","useNavigate","handleOnChange","target","name","value","dispatch","useDispatch","onSubmit","preventDefault","payload","type","axios","post","then","res","getLoginSuccessFunction","alert","catch","err","placeholder","onChange","Products","useEffect","get","products","AppReducer","isLoading","isError","length","map","to","id","ProductsDetails","d","setD","params","useParams","console","log","AllRoutes","auth","isAuth","path","element","App","className","Boolean","window","location","hostname","match","initState","isLoginLoading","isLoginError","rootReducer","combineReducers","Auth","store","legacy_createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.11fca4f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const loadData = (key) => {\r\n    try{\r\n        let temp = localStorage.getItem(key);\r\n    temp = JSON.parse(temp);\r\n    return temp;\r\n    }\r\n    catch (e) {\r\n        return undefined\r\n    }\r\n}\r\nexport const saveData = (key,data) => {\r\n    localStorage.setItem(key,JSON.stringify(data));\r\n}\r\n\r\n","import React from 'react'\r\n\r\nconst About = () => {\r\n  return (\r\n    <div>About</div>\r\n  )\r\n}\r\n\r\nexport default About","import React from 'react'\r\n\r\nconst Cart = () => {\r\n  return (\r\n    <div>Cart</div>\r\n  )\r\n}\r\n\r\nexport default Cart","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { loadData } from '../utils/LocalStorage'\r\n\r\nconst Home = () => {\r\n     const token = useSelector((state)=> state.AuthReducer.token)\r\n    // alert(token)\r\n    const tokn = loadData(\"token\") || token\r\n   \r\n  return (\r\n    <div>Home :\r\n        <div>Token is : {tokn ? tokn.token : null}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home","import React, { useState } from 'react'\r\nimport axios from \"axios\"\r\nimport { useDispatch } from 'react-redux'\r\nimport { getLoginFailureFunction, getLoginRequestFunction, getLoginSuccessFunction } from '../Redux/AuthReducer/actions'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst Login = () => {\r\n    const [form, setForm] = useState({\r\n        email: \"eve.holt@reqres.in\",\r\n        password: \"cityslicka\"\r\n      });\r\n    \r\n    const navigate = useNavigate()\r\n                const handleOnChange = (e) => {\r\n                    const {name,value} = e.target\r\n                    setForm({\r\n                        ...form,\r\n                        [name]:value\r\n                    })\r\n                }\r\n      const dispatch = useDispatch()\r\n                const handleOnSubmit = (e)=> {\r\n                    e.preventDefault()\r\n                   \r\n                    \r\n                    if(form.email && form.password){\r\n                        const payload = {\r\n                            email : form.email,\r\n                            password : form.password\r\n                        }\r\n                       dispatch(getLoginRequestFunction())\r\n                       axios.post(\"https://reqres.in/api/login\", payload)\r\n                       .then((res)=> {dispatch(getLoginSuccessFunction(res.data))\r\n                      alert(\"Succeed\")\r\n                      navigate(\"/\")\r\n                    })\r\n                    .catch((err)=> {dispatch(getLoginFailureFunction())\r\n                       alert(\" Please Enter Valid Details\")\r\n                    })\r\n                    \r\n                    }\r\n                    else {\r\n                        alert(\"Enter Valid Details\")\r\n                    }\r\n                }\r\n  return (\r\n    <div>Login\r\n\r\n        <form onSubmit={handleOnSubmit}> \r\n            <input type=\"email\"\r\n             placeholder='Enter Email'\r\n              name=\"email\"\r\n              value={form.email}\r\n              onChange={handleOnChange}\r\n            /> <br /> <br />\r\n            <input type=\"password\"\r\n            placeholder='Enter Password'\r\n            name=\"password\"\r\n            value={form.password}\r\n            onChange={handleOnChange}\r\n            />\r\n            <br /> <br />\r\n            <button>Login</button>\r\n        </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login","import { getLoginFailure, getLoginRequest, getLoginSuccess } from \"./actionsType\"\r\n\r\nexport const getLoginRequestFunction = () => {\r\n    return {\r\n        type: getLoginRequest\r\n    }\r\n}\r\n\r\nexport const getLoginFailureFunction = () => {\r\n    return {\r\n        type : getLoginFailure\r\n    }\r\n}\r\n\r\nexport const getLoginSuccessFunction = (payload) => {\r\n    return {\r\n        type : getLoginSuccess, payload\r\n    }\r\n}","export const getLoginRequest = \"GET_LOGIN_REQUEST\";\r\nexport const getLoginFailure = \"GET_LOGIN_FAILURE\";\r\nexport const getLoginSuccess = \"GET_LOGIN_SUCCESS\";","import React, { useEffect } from 'react'\r\nimport axios from \"axios\"\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getProductsFailureFunction, getProductsRequestFunction, getProductsSuccessFunction } from '../Redux/AppReducer/actions'\r\nconst Products = () => {\r\n\r\n\r\n     const dispatch = useDispatch()\r\n    const get = () => {\r\n        dispatch(getProductsRequestFunction())\r\n        axios.get(`http://localhost:8080/products`)\r\n        .then((res)=> dispatch(getProductsSuccessFunction(res.data)))\r\n        .catch((err)=> dispatch(getProductsFailureFunction()))\r\n    }\r\n    useEffect(()=> {\r\n        get()\r\n    },[])\r\n   \r\n    const {products,isLoading,isError} = useSelector((state)=> {\r\n        return{\r\n            products: state.AppReducer.products,\r\n            isLoading: state.AppReducer.isLoading,\r\n            isError: state.AppReducer.isError\r\n        }\r\n    })\r\n\r\n    \r\n\r\n  return isLoading ?\r\n   (<h1>...Loading</h1>) : isError ?\r\n    (<h1>...Something Went Wrong</h1>)\r\n   : (\r\n    <div>Products\r\n        \r\n  {products.length > 1 && \r\n  products.map((data)=> (\r\n    <Link to={`/products/${data.id}`} key={data.id}>\r\n        <div>\r\n            {data.id}\r\n        </div>\r\n    </Link>\r\n  ))\r\n  }\r\n\r\n    </div> \r\n  )\r\n}\r\n\r\nexport default Products","import { getProductsFailure, getProductsRequest, getProductsSuccess } from \"./actionsType\"\r\n\r\nexport const getProductsFailureFunction = () => {\r\n    return {\r\n        type : getProductsFailure\r\n    }\r\n}\r\n\r\nexport const getProductsRequestFunction = () => {\r\n  return {\r\n    type : getProductsRequest\r\n  }\r\n}\r\n\r\nexport const getProductsSuccessFunction = (payload) => {\r\n    return {\r\n        type: getProductsSuccess, payload\r\n    }\r\n}","export const getProductsRequest = \"GET_PRODUCTS_REQUEST\";\r\nexport const getProductsFailure = \"GET_PRODUCTS_FAILURE\";\r\nexport const getProductsSuccess = \"GET_PRODUCTS_SUCCESS\";","import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { saveData } from '../utils/LocalStorage';\r\n\r\nconst ProductsDetails = () => {\r\n    const [d,setD] = useState([])\r\n    const params = useParams();\r\n  \r\n\r\n    const get = () => {\r\n        axios\r\n        .get(`http://localhost:8080/products/${params.id}`)\r\n      .then((res)=> setD(res.data))\r\n      .catch((err)=> alert(err))\r\n    }\r\n    useEffect(()=> {\r\n        get()\r\n    },[])\r\n    console.log(d)\r\n    \r\n  return (\r\n    <div>ProductsDetails\r\n    \r\n    <div>{d.id}</div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProductsDetails","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport {Routes,Route,Link} from \"react-router-dom\";\r\nimport { loadData } from '../utils/LocalStorage';\r\nimport About from './About';\r\nimport Cart from './Cart';\r\nimport Home from './Home';\r\nimport Login from './Login';\r\nimport Products from './Products';\r\nimport ProductsDetails from './ProductsDetails';\r\n\r\nconst AllRoutes = () => {\r\n    const auth = useSelector((state)=> state.AuthReducer.isAuth)\r\n    let isAuth = loadData(\"isAuth\") || auth\r\n   \r\n  return (\r\n    <div>\r\n        \r\n      <Link to=\"/\">Home</Link>\r\n      <Link to=\"/about\">About</Link>\r\n      <Link to=\"/products\">Products</Link>\r\n      <Link to=\"/cart\">Cart</Link>\r\n      <Link to=\"/login\">Login</Link>\r\n\r\n        <Routes>\r\n            <Route path='/' element={<Home />} />\r\n            <Route path='/about' element={<About />} />\r\n            <Route path='/cart' element={isAuth ? <Cart /> : <Login />} />\r\n            <Route path='/products' element={isAuth ? <Products /> : <Login />} />\r\n            <Route path='/products/:id' element={<ProductsDetails />} />\r\n            <Route path='/login' element={<Login />} />\r\n        </Routes>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AllRoutes","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { loadData, saveData } from './utils/LocalStorage';\nimport AllRoutes from './Components/AllRoutes';\n\nfunction App() {\n\n  //http://localhost:8080/products\n\n  \n  return (\n    <div className=\"App\">\n     <AllRoutes />\n    </div>\n  );\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { getProductsFailure, getProductsRequest, getProductsSuccess } from \"./actionsType\"\r\n\r\nconst initState = {\r\n    products: [],\r\n    isLoading: false,\r\n    isError : false\r\n}\r\n\r\nexport const reducer = (state=initState, {type,payload}) => {\r\n   switch(type) {\r\n    case getProductsRequest : {\r\n        return {\r\n            ...state,\r\n            isLoading:true,\r\n            isError: false\r\n        }\r\n\r\n    }\r\n    case getProductsFailure : {\r\n        return {\r\n            ...state,\r\n            isLoading: false,\r\n            isError: true\r\n        }\r\n\r\n    }\r\n    case getProductsSuccess : {\r\n       return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: false,\r\n        products: [...payload]\r\n       }\r\n\r\n    }\r\n\r\n    default: \r\n    return state\r\n   }\r\n}","import { loadData, saveData } from \"../../utils/LocalStorage\"\r\nimport { getLoginFailure, getLoginRequest, getLoginSuccess } from \"./actionsType\"\r\n\r\nconst initState = {\r\n    isAuth : loadData(\"isAuth\") || false,\r\n    isLoginLoading : false,\r\n    isLoginError : false,\r\n    token : ''\r\n}\r\n\r\n\r\nexport const reducer = (state=initState, {type,payload}) => {\r\n    switch(type){\r\n        case getLoginRequest : {\r\n          return  {\r\n            ...state,\r\n            isLoginError: false,\r\n            isLoginLoading : true\r\n          }\r\n        }\r\n        case getLoginFailure : {\r\n          return {\r\n            ...state,\r\n            isLoginLoading: false,\r\n            isLoginError: true\r\n            \r\n          }\r\n        }\r\n        case getLoginSuccess : {\r\n            let Auth = true;\r\n            saveData(\"isAuth\",Auth)\r\n            let tokn = payload\r\n            saveData(\"token\",tokn)\r\n         return {\r\n            ...state,\r\n            isLoginLoading : false,\r\n            isLoginError: false,\r\n            token : [tokn],\r\n            isAuth: Auth\r\n\r\n         }\r\n        }\r\n        default : \r\n        return state\r\n    }\r\n}","import { legacy_createStore,combineReducers } from \"redux\";\r\nimport { reducer as AppReducer } from \"./reducer\";\r\nimport {reducer as AuthReducer} from \"../AuthReducer/reducer\"\r\n\r\nconst rootReducer = combineReducers({\r\n    AppReducer,\r\n    AuthReducer\r\n})\r\n\r\nexport const store = legacy_createStore(rootReducer)","import React, { Profiler } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\"\nimport {Provider} from \"react-redux\"\nimport { store } from './Redux/AppReducer/store';\n\nReactDOM.render(\n<BrowserRouter>\n<Provider store={store}>\n<App />\n</Provider>\n</BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}